// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// loglikUPCM
double loglikUPCM(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUPCM(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUPCM(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUPCM2
double loglikUPCM2(arma::vec alpha, arma::mat Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUPCM2(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUPCM2(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUPCM4
double loglikUPCM4(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, arma::mat GHweights, arma::vec GHnodes, arma::mat X, int cores, arma::vec betaX, arma::vec betaU, arma::vec delta, double lambda);
RcppExport SEXP _UPCM_loglikUPCM4(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP betaXSEXP, SEXP betaUSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaX(betaXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaU(betaUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUPCM4(alpha, Y, Q, q, n, I, GHweights, GHnodes, X, cores, betaX, betaU, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// scoreUPCM
arma::vec scoreUPCM(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, arma::vec sigma, double lambda);
RcppExport SEXP _UPCM_scoreUPCM(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreUPCM(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUGPCM
double loglikUGPCM(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUGPCM(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUGPCM(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUGPCM2
double loglikUGPCM2(arma::vec alpha, arma::mat Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUGPCM2(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUGPCM2(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// scoreUGPCM
arma::vec scoreUGPCM(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, arma::vec sigma, double lambda);
RcppExport SEXP _UPCM_scoreUGPCM(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreUGPCM(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUGPCM4
double loglikUGPCM4(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, arma::mat GHweights, arma::vec GHnodes, arma::mat X, int cores, arma::vec betaX, arma::vec betaU, arma::vec delta, arma::vec slopes, double lambda);
RcppExport SEXP _UPCM_loglikUGPCM4(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP betaXSEXP, SEXP betaUSEXP, SEXP deltaSEXP, SEXP slopesSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaX(betaXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaU(betaUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type slopes(slopesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUGPCM4(alpha, Y, Q, q, n, I, GHweights, GHnodes, X, cores, betaX, betaU, delta, slopes, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUPCMnoX
double loglikUPCMnoX(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUPCMnoX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUPCMnoX(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// scoreUPCMnoX
arma::vec scoreUPCMnoX(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int cores, arma::vec sigma, double lambda);
RcppExport SEXP _UPCM_scoreUPCMnoX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP coresSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreUPCMnoX(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, cores, sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUPCM4noX
double loglikUPCM4noX(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, arma::mat GHweights, arma::vec GHnodes, int cores, arma::vec delta, double lambda);
RcppExport SEXP _UPCM_loglikUPCM4noX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP coresSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUPCM4noX(alpha, Y, Q, q, n, I, GHweights, GHnodes, cores, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUPCM2noX
double loglikUPCM2noX(arma::vec alpha, arma::mat Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUPCM2noX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUPCM2noX(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUGPCMnoX
double loglikUGPCMnoX(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUGPCMnoX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUGPCMnoX(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// scoreUGPCMnoX
arma::vec scoreUGPCMnoX(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int cores, arma::vec sigma, double lambda);
RcppExport SEXP _UPCM_scoreUGPCMnoX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP coresSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreUGPCMnoX(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, cores, sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUGPCM2noX
double loglikUGPCM2noX(arma::vec alpha, arma::mat Y, int Q, int q, int n, int I, int pall, arma::mat GHweights, arma::vec GHnodes, int pX, arma::mat X, int cores, double lambda);
RcppExport SEXP _UPCM_loglikUGPCM2noX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP pallSEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP pXSEXP, SEXP XSEXP, SEXP coresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type pall(pallSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUGPCM2noX(alpha, Y, Q, q, n, I, pall, GHweights, GHnodes, pX, X, cores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglikUGPCM4noX
double loglikUGPCM4noX(arma::vec alpha, arma::vec Y, int Q, int q, int n, int I, arma::mat GHweights, arma::vec GHnodes, int cores, arma::vec delta, arma::vec slopes, double lambda);
RcppExport SEXP _UPCM_loglikUGPCM4noX(SEXP alphaSEXP, SEXP YSEXP, SEXP QSEXP, SEXP qSEXP, SEXP nSEXP, SEXP ISEXP, SEXP GHweightsSEXP, SEXP GHnodesSEXP, SEXP coresSEXP, SEXP deltaSEXP, SEXP slopesSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GHweights(GHweightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type GHnodes(GHnodesSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type slopes(slopesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikUGPCM4noX(alpha, Y, Q, q, n, I, GHweights, GHnodes, cores, delta, slopes, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_UPCM_loglikUPCM", (DL_FUNC) &_UPCM_loglikUPCM, 13},
    {"_UPCM_loglikUPCM2", (DL_FUNC) &_UPCM_loglikUPCM2, 13},
    {"_UPCM_loglikUPCM4", (DL_FUNC) &_UPCM_loglikUPCM4, 14},
    {"_UPCM_scoreUPCM", (DL_FUNC) &_UPCM_scoreUPCM, 14},
    {"_UPCM_loglikUGPCM", (DL_FUNC) &_UPCM_loglikUGPCM, 13},
    {"_UPCM_loglikUGPCM2", (DL_FUNC) &_UPCM_loglikUGPCM2, 13},
    {"_UPCM_scoreUGPCM", (DL_FUNC) &_UPCM_scoreUGPCM, 14},
    {"_UPCM_loglikUGPCM4", (DL_FUNC) &_UPCM_loglikUGPCM4, 15},
    {"_UPCM_loglikUPCMnoX", (DL_FUNC) &_UPCM_loglikUPCMnoX, 13},
    {"_UPCM_scoreUPCMnoX", (DL_FUNC) &_UPCM_scoreUPCMnoX, 12},
    {"_UPCM_loglikUPCM4noX", (DL_FUNC) &_UPCM_loglikUPCM4noX, 11},
    {"_UPCM_loglikUPCM2noX", (DL_FUNC) &_UPCM_loglikUPCM2noX, 13},
    {"_UPCM_loglikUGPCMnoX", (DL_FUNC) &_UPCM_loglikUGPCMnoX, 13},
    {"_UPCM_scoreUGPCMnoX", (DL_FUNC) &_UPCM_scoreUGPCMnoX, 12},
    {"_UPCM_loglikUGPCM2noX", (DL_FUNC) &_UPCM_loglikUGPCM2noX, 13},
    {"_UPCM_loglikUGPCM4noX", (DL_FUNC) &_UPCM_loglikUGPCM4noX, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_UPCM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
